base = 10, right = TRUE,
name = NULL) {
## --------------------------------------------------------------------------
##  Tidy‑eval set‑up
## --------------------------------------------------------------------------
var_quo  <- rlang::enquo(var)
var_name <- rlang::as_name(var_quo)
x <- dplyr::pull(data, !!var_quo)
if (!is.numeric(x)) stop("`var` must be numeric.", call. = FALSE)
x <- x[!is.na(x)]
if (length(x) < min_per_bin)
stop("Need at least `min_per_bin` non‑NA values.", call. = FALSE)
## --------------------------------------------------------------------------
##  Range in log space
## --------------------------------------------------------------------------
log_x   <- log(x, base = base)
min_log <- min(log_x)
max_log <- max(log_x)
## --------------------------------------------------------------------------
##  Start from the largest bin count that *could* meet the size rule
## --------------------------------------------------------------------------
max_bins <- max(1, floor(length(x) / min_per_bin))
num_bins <- max_bins
repeat {
bin_size   <- (max_log - min_log) / num_bins
## ------------------------------------------------------------
##  NEW : build *exactly* num_bins + 1 breaks,
##        then set the last break == max_log
## ------------------------------------------------------------
breaks_log <- min_log + bin_size * 0:num_bins
breaks_log[length(breaks_log)] <- max_log           # force equality
breaks <- base ^ breaks_log                         # back‑transform
bin_fac <- cut(
x, breaks = breaks,
include.lowest = TRUE, right = right
)
counts <- tabulate(bin_fac, nbins = length(breaks) - 1)
if (min(counts) >= min_per_bin || num_bins == 1) break
num_bins <- num_bins - 1
}
bin_log_equal_width <- function(data, var, min_per_bin = 100,
base = 10, right = TRUE,
name = NULL) {
## --------------------------------------------------------------------------
##  Tidy‑eval set‑up
## --------------------------------------------------------------------------
var_quo  <- rlang::enquo(var)
var_name <- rlang::as_name(var_quo)
x <- dplyr::pull(data, !!var_quo)
if (!is.numeric(x)) stop("`var` must be numeric.", call. = FALSE)
x <- x[!is.na(x)]
if (length(x) < min_per_bin)
stop("Need at least `min_per_bin` non‑NA values.", call. = FALSE)
## --------------------------------------------------------------------------
##  Range in log space
## --------------------------------------------------------------------------
log_x   <- log(x, base = base)
min_log <- min(log_x)
max_log <- max(log_x)
## --------------------------------------------------------------------------
##  Start from the largest bin count that *could* meet the size rule
## --------------------------------------------------------------------------
max_bins <- max(1, floor(length(x) / min_per_bin))
num_bins <- max_bins
repeat {
bin_size   <- (max_log - min_log) / num_bins
## ------------------------------------------------------------
##  NEW : build *exactly* num_bins + 1 breaks,
##        then set the last break == max_log
## ------------------------------------------------------------
breaks_log <- min_log + bin_size * 0:num_bins
breaks_log[length(breaks_log)] <- max_log           # force equality
breaks <- base ^ breaks_log                         # back‑transform
bin_fac <- cut(
x, breaks = breaks,
include.lowest = TRUE, right = right
)
counts <- tabulate(bin_fac, nbins = length(breaks) - 1)
if (min(counts) >= min_per_bin || num_bins == 1) break
num_bins <- num_bins - 1
}
bin_log_equal_width <- function(data, var, min_per_bin = 100,
base = 10, right = TRUE,
name = NULL) {
## --------------------------------------------------------------------------
##  Tidy‑eval set‑up
## --------------------------------------------------------------------------
var_quo  <- rlang::enquo(var)
var_name <- rlang::as_name(var_quo)
x <- dplyr::pull(data, !!var_quo)
if (!is.numeric(x)) stop("`var` must be numeric.", call. = FALSE)
x <- x[!is.na(x)]
if (length(x) < min_per_bin)
stop("Need at least `min_per_bin` non‑NA values.", call. = FALSE)
## --------------------------------------------------------------------------
##  Range in log space
## --------------------------------------------------------------------------
log_x   <- log(x, base = base)
min_log <- min(log_x)
max_log <- max(log_x)
## --------------------------------------------------------------------------
##  Start from the largest bin count that *could* meet the size rule
## --------------------------------------------------------------------------
max_bins <- max(1, floor(length(x) / min_per_bin))
num_bins <- max_bins
repeat {
bin_size   <- (max_log - min_log) / num_bins
## ------------------------------------------------------------
##  NEW : build *exactly* num_bins + 1 breaks,
##        then set the last break == max_log
## ------------------------------------------------------------
breaks_log <- min_log + bin_size * 0:num_bins
breaks_log[length(breaks_log)] <- max_log           # force equality
breaks <- base ^ breaks_log                         # back‑transform
bin_fac <- cut(
x, breaks = breaks,
include.lowest = TRUE, right = right
)
counts <- tabulate(bin_fac, nbins = length(breaks) - 1)
if (min(counts) >= min_per_bin || num_bins == 1) break
num_bins <- num_bins - 1
}
#'
#' @return If `name` is NULL, returns a list with:
#'   - `breaks`: bin edges
#'   - `binned_data`: original data with binned column
#'   - `summary`: bin counts and bootstrap counts
#'   If `name` is provided, returns nothing and saves:
#'   - `<name>`: binned data
#'   - `<name>_summary`: summary table
#'
#' @export
bin_log_equal_width <- function(data, var, min_per_bin = 100,
base = 10, right = TRUE,
name = NULL) {
## --------------------------------------------------------------------------
##  Tidy‑eval set‑up
## --------------------------------------------------------------------------
var_quo  <- rlang::enquo(var)
var_name <- rlang::as_name(var_quo)
x <- dplyr::pull(data, !!var_quo)
if (!is.numeric(x)) stop("`var` must be numeric.", call. = FALSE)
x <- x[!is.na(x)]
if (length(x) < min_per_bin)
stop("Need at least `min_per_bin` non‑NA values.", call. = FALSE)
## --------------------------------------------------------------------------
##  Range in log space
## --------------------------------------------------------------------------
log_x   <- log(x, base = base)
min_log <- min(log_x)
max_log <- max(log_x)
## --------------------------------------------------------------------------
##  Start from the largest bin count that *could* meet the size rule
## --------------------------------------------------------------------------
max_bins <- max(1, floor(length(x) / min_per_bin))
num_bins <- max_bins
repeat {
bin_size   <- (max_log - min_log) / num_bins
## ------------------------------------------------------------
##  NEW : build *exactly* num_bins + 1 breaks,
##        then set the last break == max_log
## ------------------------------------------------------------
breaks_log <- min_log + bin_size * 0:num_bins
breaks_log[length(breaks_log)] <- max_log           # force equality
breaks <- base ^ breaks_log                         # back‑transform
bin_fac <- cut(
x, breaks = breaks,
include.lowest = TRUE, right = right
)
counts <- tabulate(bin_fac, nbins = length(breaks) - 1)
if (min(counts) >= min_per_bin || num_bins == 1) break
num_bins <- num_bins - 1
}
## --------------------------------------------------------------------------
##  Attach classes, build summary, return / assign
## --------------------------------------------------------------------------
labels    <- paste(breaks[-length(breaks)], "-", breaks[-1])
class_col <- paste0(var_name, "_class")
binned_data <- dplyr::mutate(
data,
!!class_col := cut(
!!var_quo,
breaks = breaks,
include.lowest = TRUE, right = right,
labels = labels
)
)
summary_tbl <- binned_data %>%
dplyr::group_by(!!rlang::sym(class_col)) %>%
dplyr::summarise(original_count = dplyr::n(), .groups = "drop") %>%
dplyr::mutate(
bootstrap_count = max(original_count) - original_count
)
if (!is.null(name)) {
assign(name,              binned_data,  envir = rlang::global_env())
assign(paste0(name, "_summary"), summary_tbl, envir = rlang::global_env())
invisible(NULL)
} else {
list(
breaks      = breaks,
binned_data = binned_data,
summary     = summary_tbl
)
}
#'
#' @return If `name` is NULL, returns a list with:
#'   - `breaks`: bin edges
#'   - `binned_data`: original data with binned column
#'   - `summary`: bin counts and bootstrap counts
#'   If `name` is provided, returns nothing and saves:
#'   - `<name>`: binned data
#'   - `<name>_summary`: summary table
#'
#' @export
bin_log_equal_width <- function(data, var, min_per_bin = 100,
base = 10, right = TRUE,
name = NULL) {
## --------------------------------------------------------------------------
##  Tidy‑eval set‑up
## --------------------------------------------------------------------------
var_quo  <- rlang::enquo(var)
var_name <- rlang::as_name(var_quo)
x <- dplyr::pull(data, !!var_quo)
if (!is.numeric(x)) stop("`var` must be numeric.", call. = FALSE)
x <- x[!is.na(x)]
if (length(x) < min_per_bin)
stop("Need at least `min_per_bin` non‑NA values.", call. = FALSE)
## --------------------------------------------------------------------------
##  Range in log space
## --------------------------------------------------------------------------
log_x   <- log(x, base = base)
min_log <- min(log_x)
max_log <- max(log_x)
## --------------------------------------------------------------------------
##  Start from the largest bin count that *could* meet the size rule
## --------------------------------------------------------------------------
max_bins <- max(1, floor(length(x) / min_per_bin))
num_bins <- max_bins
repeat {
bin_size   <- (max_log - min_log) / num_bins
## ------------------------------------------------------------
##  NEW : build *exactly* num_bins + 1 breaks,
##        then set the last break == max_log
## ------------------------------------------------------------
breaks_log <- min_log + bin_size * 0:num_bins
breaks_log[length(breaks_log)] <- max_log           # force equality
breaks <- base ^ breaks_log                         # back‑transform
bin_fac <- cut(
x, breaks = breaks,
include.lowest = TRUE, right = right
)
counts <- tabulate(bin_fac, nbins = length(breaks) - 1)
if (min(counts) >= min_per_bin || num_bins == 1) break
num_bins <- num_bins - 1
}
## --------------------------------------------------------------------------
##  Attach classes, build summary, return / assign
## --------------------------------------------------------------------------
labels    <- paste(breaks[-length(breaks)], "-", breaks[-1])
class_col <- paste0(var_name, "_class")
binned_data <- dplyr::mutate(
data,
!!class_col := cut(
!!var_quo,
breaks = breaks,
include.lowest = TRUE, right = right,
labels = labels
)
)
summary_tbl <- binned_data %>%
dplyr::group_by(!!rlang::sym(class_col)) %>%
dplyr::summarise(original_count = dplyr::n(), .groups = "drop") %>%
dplyr::mutate(
bootstrap_count = max(original_count) - original_count
)
if (!is.null(name)) {
assign(name,              binned_data,  envir = rlang::global_env())
assign(paste0(name, "_summary"), summary_tbl, envir = rlang::global_env())
invisible(NULL)
} else {
list(
breaks      = breaks,
binned_data = binned_data,
summary     = summary_tbl
)
}
}
bin_log_equal_width(data = df_full_aboveground, var = L, min_per_bin = 100, name = "data_binned")
bin_log_equal_width <- function(data, var, min_per_bin = 100,
base = 10, right = TRUE,
name = NULL) {
## --------------------------------------------------------------------------
##  Tidy‑eval set‑up
## --------------------------------------------------------------------------
var_quo  <- rlang::enquo(var)
var_name <- rlang::as_name(var_quo)
x <- dplyr::pull(data, !!var_quo)
if (!is.numeric(x)) stop("`var` must be numeric.", call. = FALSE)
x <- x[!is.na(x)]
if (length(x) < min_per_bin)
stop("Need at least `min_per_bin` non‑NA values.", call. = FALSE)
## --------------------------------------------------------------------------
##  Range in log space
## --------------------------------------------------------------------------
log_x   <- log(x, base = base)
min_log <- min(log_x)
max_log <- max(log_x)
## --------------------------------------------------------------------------
##  Start from the largest bin count that *could* meet the size rule
## --------------------------------------------------------------------------
max_bins <- max(1, floor(length(x) / min_per_bin))
num_bins <- max_bins
repeat {
bin_size   <- (max_log - min_log) / num_bins
## ------------------------------------------------------------
##  NEW : build *exactly* num_bins + 1 breaks,
##        then set the last break == max_log
## ------------------------------------------------------------
breaks_log <- min_log + bin_size * 0:num_bins
breaks_log[length(breaks_log)] <- max_log           # force equality
breaks <- base ^ breaks_log                         # back‑transform
bin_fac <- cut(
x, breaks = breaks,
include.lowest = TRUE, right = right
)
counts <- tabulate(bin_fac, nbins = length(breaks) - 1)
if (min(counts) >= min_per_bin || num_bins == 1) break
num_bins <- num_bins - 1
}
## --------------------------------------------------------------------------
##  Attach classes, build summary, return / assign
## --------------------------------------------------------------------------
labels    <- paste(breaks[-length(breaks)], "-", breaks[-1])
class_col <- paste0(var_name, "_class")
binned_data <- dplyr::mutate(
data,
!!class_col := cut(
!!var_quo,
breaks = breaks,
include.lowest = TRUE, right = right,
labels = labels
)
)
summary_tbl <- binned_data %>%
dplyr::group_by(!!rlang::sym(class_col)) %>%
dplyr::summarise(original_count = dplyr::n(), .groups = "drop") %>%
dplyr::mutate(
bootstrap_count = max(original_count) - original_count
)
if (!is.null(name)) {
assign(name,              binned_data,  envir = rlang::global_env())
assign(paste0(name, "_summary"), summary_tbl, envir = rlang::global_env())
invisible(NULL)
} else {
list(
breaks      = breaks,
binned_data = binned_data,
summary     = summary_tbl
)
}
}
bin_log_equal_width(data = df_full_aboveground, var = L, min_per_bin = 100, name = "data_binned")
#'
#' @return If `name` is NULL, returns a list with:
#'   - `breaks`: bin edges
#'   - `binned_data`: original data with binned column
#'   - `summary`: bin counts and bootstrap counts
#'   If `name` is provided, returns nothing and saves:
#'   - `<name>`: binned data
#'   - `<name>_summary`: summary table
#'
#' @export
bin_log_equal_width <- function(data, var, min_per_bin = 100,
base = 10, right = TRUE,
name = NULL) {
## --------------------------------------------------------------------------
##  Tidy‑eval set‑up
## --------------------------------------------------------------------------
var_quo  <- rlang::enquo(var)
var_name <- rlang::as_name(var_quo)
x <- dplyr::pull(data, !!var_quo)
if (!is.numeric(x)) stop("`var` must be numeric.", call. = FALSE)
x <- x[!is.na(x)]
if (length(x) < min_per_bin)
stop("Need at least `min_per_bin` non‑NA values.", call. = FALSE)
## --------------------------------------------------------------------------
##  Range in log space
## --------------------------------------------------------------------------
log_x   <- log(x, base = base)
min_log <- min(log_x)
max_log <- max(log_x)
## --------------------------------------------------------------------------
##  Start from the largest bin count that *could* meet the size rule
## --------------------------------------------------------------------------
max_bins <- max(1, floor(length(x) / min_per_bin))
num_bins <- max_bins
repeat {
bin_size   <- (max_log - min_log) / num_bins
## ------------------------------------------------------------
##  NEW : build *exactly* num_bins + 1 breaks,
##        then set the last break == max_log
## ------------------------------------------------------------
breaks_log <- min_log + bin_size * 0:num_bins
breaks_log[length(breaks_log)] <- max_log           # force equality
breaks <- base ^ breaks_log                         # back‑transform
bin_fac <- cut(
x, breaks = breaks,
include.lowest = TRUE, right = right
)
counts <- tabulate(bin_fac, nbins = length(breaks) - 1)
if (min(counts) >= min_per_bin || num_bins == 1) break
num_bins <- num_bins - 1
}
## --------------------------------------------------------------------------
##  Attach classes, build summary, return / assign
## --------------------------------------------------------------------------
labels    <- paste(breaks[-length(breaks)], "-", breaks[-1])
class_col <- paste0(var_name, "_class")
binned_data <- dplyr::mutate(
data,
!!class_col := cut(
!!var_quo,
breaks = breaks,
include.lowest = TRUE, right = right,
labels = labels
)
)
summary_tbl <- binned_data %>%
dplyr::group_by(!!rlang::sym(class_col)) %>%
dplyr::summarise(original_count = dplyr::n(), .groups = "drop") %>%
dplyr::mutate(
bootstrap_count = max(original_count) - original_count
)
if (!is.null(name)) {
assign(name,              binned_data,  envir = rlang::global_env())
assign(paste0(name, "_summary"), summary_tbl, envir = rlang::global_env())
invisible(NULL)
} else {
list(
breaks      = breaks,
binned_data = binned_data,
summary     = summary_tbl
)
}
}
bin_log_equal_width(data = df_full_aboveground, var = L, min_per_bin = 100, name = "data_binned")
bin_log_equal_width <- function(data, var, min_per_bin = 100,
base = 10, right = TRUE,
name = NULL) {
# --- Tidy-eval setup
var_quo  <- rlang::enquo(var)
var_name <- rlang::as_name(var_quo)
x <- dplyr::pull(data, !!var_quo)
if (!is.numeric(x)) stop("`var` must be numeric.", call. = FALSE)
x <- x[!is.na(x)]
if (length(x) < min_per_bin) {
stop("Not enough non-NA values to satisfy min_per_bin.", call. = FALSE)
}
# --- Log space range
log_x   <- log(x, base = base)
min_log <- min(log_x)
max_log <- max(log_x)
# --- Start with maximum bins possible
max_bins <- max(1, floor(length(x) / min_per_bin))
num_bins <- max_bins
repeat {
bin_size <- (max_log - min_log) / num_bins
# Create exactly num_bins + 1 break points, with final break forced to max_log
breaks_log <- min_log + bin_size * 0:num_bins
breaks_log[length(breaks_log)] <- max_log
breaks <- base ^ breaks_log
bins <- cut(
x, breaks = breaks,
include.lowest = TRUE,
right = right
)
counts <- tabulate(bins, nbins = length(breaks) - 1)
if (min(counts) >= min_per_bin || num_bins == 1) break
num_bins <- num_bins - 1
}
# --- Label construction
labels <- paste(breaks[-length(breaks)], "-", breaks[-1])
class_col <- paste0(var_name, "_class")
binned_data <- dplyr::mutate(
data,
!!class_col := cut(
!!var_quo,
breaks = breaks,
include.lowest = TRUE,
right = right,
labels = labels
)
)
# --- Summarize
summary_tbl <- binned_data %>%
dplyr::group_by(!!rlang::sym(class_col)) %>%
dplyr::summarise(original_count = dplyr::n(), .groups = "drop") %>%
dplyr::mutate(bootstrap_count = max(original_count) - original_count)
# --- Output
if (!is.null(name)) {
assign(name, binned_data, envir = rlang::global_env())
assign(paste0(name, "_summary"), summary_tbl, envir = rlang::global_env())
invisible(NULL)
} else {
list(
breaks      = breaks,
binned_data = binned_data,
summary     = summary_tbl
)
}
}
bin_log_equal_width(data = df_full_aboveground, var = L, min_per_bin = 100, name = "data_binned")
